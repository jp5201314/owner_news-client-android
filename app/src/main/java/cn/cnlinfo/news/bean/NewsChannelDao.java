package cn.cnlinfo.news.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_CHANNEL".
*/
public class NewsChannelDao extends AbstractDao<NewsChannel, Long> {

    public static final String TABLENAME = "NEWS_CHANNEL";

    /**
     * Properties of entity NewsChannel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NewsChannelName = new Property(0, String.class, "newsChannelName", false, "NEWS_CHANNEL_NAME");
        public final static Property NewsChannelId = new Property(1, String.class, "newsChannelId", false, "NEWS_CHANNEL_ID");
        public final static Property NewsChannelType = new Property(2, String.class, "newsChannelType", false, "NEWS_CHANNEL_TYPE");
        public final static Property NewsChannelSelect = new Property(3, boolean.class, "newsChannelSelect", false, "NEWS_CHANNEL_SELECT");
        public final static Property NewsChannelIndex = new Property(4, long.class, "newsChannelIndex", true, "NEWS_CHANNEL_INDEX");
        public final static Property NewsChannelFixed = new Property(5, boolean.class, "newsChannelFixed", false, "NEWS_CHANNEL_FIXED");
    }


    public NewsChannelDao(DaoConfig config) {
        super(config);
    }
    
    public NewsChannelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_CHANNEL\" (" + //
                "\"NEWS_CHANNEL_NAME\" TEXT NOT NULL ," + // 0: newsChannelName
                "\"NEWS_CHANNEL_ID\" TEXT NOT NULL ," + // 1: newsChannelId
                "\"NEWS_CHANNEL_TYPE\" TEXT NOT NULL ," + // 2: newsChannelType
                "\"NEWS_CHANNEL_SELECT\" INTEGER NOT NULL ," + // 3: newsChannelSelect
                "\"NEWS_CHANNEL_INDEX\" INTEGER PRIMARY KEY NOT NULL ," + // 4: newsChannelIndex
                "\"NEWS_CHANNEL_FIXED\" INTEGER NOT NULL );"); // 5: newsChannelFixed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_CHANNEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsChannel entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getNewsChannelName());
        stmt.bindString(2, entity.getNewsChannelId());
        stmt.bindString(3, entity.getNewsChannelType());
        stmt.bindLong(4, entity.getNewsChannelSelect() ? 1L: 0L);
        stmt.bindLong(5, entity.getNewsChannelIndex());
        stmt.bindLong(6, entity.getNewsChannelFixed() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsChannel entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getNewsChannelName());
        stmt.bindString(2, entity.getNewsChannelId());
        stmt.bindString(3, entity.getNewsChannelType());
        stmt.bindLong(4, entity.getNewsChannelSelect() ? 1L: 0L);
        stmt.bindLong(5, entity.getNewsChannelIndex());
        stmt.bindLong(6, entity.getNewsChannelFixed() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 4);
    }    

    @Override
    public NewsChannel readEntity(Cursor cursor, int offset) {
        NewsChannel entity = new NewsChannel( //
            cursor.getString(offset + 0), // newsChannelName
            cursor.getString(offset + 1), // newsChannelId
            cursor.getString(offset + 2), // newsChannelType
            cursor.getShort(offset + 3) != 0, // newsChannelSelect
            cursor.getLong(offset + 4), // newsChannelIndex
            cursor.getShort(offset + 5) != 0 // newsChannelFixed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsChannel entity, int offset) {
        entity.setNewsChannelName(cursor.getString(offset + 0));
        entity.setNewsChannelId(cursor.getString(offset + 1));
        entity.setNewsChannelType(cursor.getString(offset + 2));
        entity.setNewsChannelSelect(cursor.getShort(offset + 3) != 0);
        entity.setNewsChannelIndex(cursor.getLong(offset + 4));
        entity.setNewsChannelFixed(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewsChannel entity, long rowId) {
        entity.setNewsChannelIndex(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewsChannel entity) {
        if(entity != null) {
            return entity.getNewsChannelIndex();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewsChannel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
